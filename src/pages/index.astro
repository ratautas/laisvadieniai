---
import Layout from "../layouts/Layout.astro";

const LOCALE: string = "lt-LT";
const CURRENT_YEAR: number = 2024;

function calculateEaster(year: number): Date {
  const a = year % 19;
  const b = Math.floor(year / 100);
  const c = year % 100;
  const d = Math.floor(b / 4);
  const e = b % 4;
  const f = Math.floor((b + 8) / 25);
  const g = Math.floor((b - f + 1) / 3);
  const h = (19 * a + b - d - g + 15) % 30;
  const i = Math.floor(c / 4);
  const k = c % 4;
  const l = (32 + 2 * e + 2 * i - h - k) % 7;
  const m = Math.floor((a + 11 * h + 22 * l) / 451);
  const month = Math.floor((h + l - 7 * m + 114) / 31);
  const day = ((h + l - 7 * m + 114) % 31) + 1;
  return new Date(Date.UTC(year, month - 1, day));
}

function getEasterSundayDay(): number {
  const easter = calculateEaster(CURRENT_YEAR);
  return easter.getUTCDate();
}

function getEasterMondayDay(): number {
  const easter = calculateEaster(CURRENT_YEAR);
  const easterMonday = new Date(easter);
  easterMonday.setUTCDate(easter.getUTCDate() + 1);
  return easterMonday.getUTCDate();
}

function getEasterSundayMonth(): number {
  const easter = calculateEaster(CURRENT_YEAR);
  return easter.getUTCMonth() + 1;
}

function getEasterMondayMonth(): number {
  const easter = calculateEaster(CURRENT_YEAR);
  const easterMonday = new Date(easter);
  easterMonday.setUTCDate(easter.getUTCDate() + 1);
  return easterMonday.getUTCMonth() + 1;
}

const publicHolidays = [
  { month: 1, day: 1, label: "Naujieji metai" },
  { month: 2, day: 16, label: "Lietuvos valstybės atkūrimo diena" },
  { month: 3, day: 11, label: "Lietuvos nepriklausomybės atkūrimo diena" },
  {
    month: getEasterSundayMonth(),
    day: getEasterSundayDay(),
    label: "Velykos",
  },
  {
    month: getEasterMondayMonth(),
    day: getEasterMondayDay(),
    label: "Velykų antroji diena",
  },
  { month: 5, day: 1, label: "Tarptautinė darbo diena" },
  { month: 6, day: 24, label: "Joninės, Rasos" },
  { month: 7, day: 6, label: "Mindaugo karūnavimo diena" },
  { month: 8, day: 15, label: "Žolinė" },
  { month: 11, day: 1, label: "Visų šventųjų diena" },
  { month: 12, day: 24, label: "Šv. Kūčios" },
  { month: 12, day: 25, label: "Šv. Kalėdos" },
  { month: 12, day: 26, label: "Šv. Kalėdų antroji diena" },
];

type Holiday = (typeof publicHolidays)[number];

function isHoliday(date: Date): boolean {
  return publicHolidays.some((holiday: Holiday) => {
    return (
      date.getUTCMonth() + 1 === holiday.month &&
      date.getUTCDate() === holiday.day
    );
  });
}

function isWeekend(date: Date): boolean {
  const weekday = new Intl.DateTimeFormat(LOCALE, { weekday: "long" }).format(
    date
  );
  return ["šeštadienis", "sekmadienis"].includes(weekday.toLowerCase());
}

function isDayOff(date: Date, year: number): boolean {
  return isWeekend(date) || isHoliday(date);
}

function getHolidayLabel(date: Date): string | null {
  for (const holiday of publicHolidays) {
    if (
      date.getUTCMonth() + 1 === holiday.month &&
      date.getUTCDate() === holiday.day
    )
      return holiday.label;
  }

  return null;
}

interface Day {
  number: number;
  isOff: boolean;
  holidayLabel: string | null;
}

function getCalendarData(year: number): Day[][][] {
  const calendar: Day[][][] = [];
  const formatter = new Intl.DateTimeFormat(LOCALE, { weekday: "long" });

  for (let month = 0; month < 12; month++) {
    const monthData: Day[][] = [];
    const firstDay = new Date(Date.UTC(year, month, 1));
    const lastDay = new Date(Date.UTC(year, month + 1, 0));
    const daysInMonth = lastDay.getUTCDate();

    let currentWeek: Day[] = [];

    // Determine the start of the week
    let startOfWeek = new Date(firstDay);
    while (formatter.format(startOfWeek) !== "pirmadienis") {
      startOfWeek.setUTCDate(startOfWeek.getUTCDate() - 1);
    }

    // Fill in the days
    for (let i = 0; i < 6 * 7; i++) {
      const currentDate = new Date(startOfWeek);
      currentDate.setUTCDate(startOfWeek.getUTCDate() + i);

      const isCurrentMonth = currentDate.getUTCMonth() === month;

      const day: Day = {
        number: isCurrentMonth ? currentDate.getUTCDate() : 0,
        isOff: isDayOff(currentDate, year),
        holidayLabel: getHolidayLabel(currentDate),
      };

      currentWeek.push(day);

      if (currentWeek.length === 7) {
        monthData.push(currentWeek);
        currentWeek = [];
      }
    }

    calendar.push(monthData);
  }

  return calendar;
}

function getCellClass(day: Day): string {
  const baseClass = "p-2 text-center relative group";
  if (day.number === 0) return `${baseClass} text-gray-300`;
  if (day.isOff) return `${baseClass} bg-red-100 font-bold`;
  return baseClass;
}

const weekdays: string[] = Array.from({ length: 7 }, (_, i) => {
  const date = new Date(Date.UTC(2023, 0, 2 + i)); // Start from Monday
  return new Intl.DateTimeFormat(LOCALE, { weekday: "short" }).format(date);
});

const calendarData = getCalendarData(CURRENT_YEAR);

const monthNames: string[] = Array.from({ length: 12 }, (_, i) => {
  const date = new Date(Date.UTC(CURRENT_YEAR, i, 1));
  return new Intl.DateTimeFormat(LOCALE, { month: "long" }).format(date);
});
---

<Layout title="Kalendorius">
  <h1 class="text-4xl font-bold mb-8">{CURRENT_YEAR} Kalendorius</h1>
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
    {
      calendarData.map((month, monthIndex) => (
        <div class="bg-white rounded shadow">
          <h2 class="text-xl font-semibold p-4 bg-gray-100">
            {monthNames[monthIndex]}
          </h2>
          <table class="w-full">
            <thead>
              <tr>
                {weekdays.map((day) => (
                  <th class="p-2 text-center">{day}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {month.map((week) => (
                <tr>
                  {week.map((day) => (
                    <td class={getCellClass(day)}>
                      {day.number !== 0 && day.number}
                      {day.holidayLabel && (
                        <span class="invisible group-hover:visible absolute z-10 w-40 bg-gray-800 text-white text-center rounded-md py-2 px-3 -mt-1 ml-6 text-xs">
                          {day.holidayLabel}
                          <span class="absolute left-0 top-1/2 -ml-2 -mt-1 border-4 border-transparent border-r-gray-800" />
                        </span>
                      )}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ))
    }
  </div>
</Layout>