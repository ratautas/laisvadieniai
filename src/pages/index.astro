---
import Layout from "../layouts/Layout.astro";

const LOCALE: string = "lt-LT";
const CURRENT_YEAR: number = 2024;

/**
 * Represents a date with day, month, weekday, week, and year properties.
 */
type DateInfo = {
  day: number;
  month: number;
  weekday: number;
  week: number;
  year: number;
  isOff: boolean;
};

const LONG_WEEKDAYS_MAP = {
  pirmadienis: 1,
  antradienis: 2,
  trečiadienis: 3,
  ketvirtadienis: 4,
  penktadienis: 5,
  šeštadienis: 6,
  sekmadienis: 7,
};

/**
 * Generates an array of dates for a specified number of years starting from a given year.
 *
 * @param startYear - The starting year for the date range (inclusive)
 * @param numYears - The number of years to generate dates for
 * @returns An array of DateInfo objects
 */
function generateDateArray(
  startYear: number,
  numYears: number = 1
): DateInfo[] {
  let i = 0;
  return Array.from({ length: numYears }, (_, yearOffset) => {
    const year = startYear + yearOffset;

    return Array.from({ length: 12 }, (_, month) => {
      const daysInMonth = new Date(year, month + 1, 0).getDate();

      return Array.from({ length: daysInMonth }, (_, dayOffset) => {
        i += 1;
        const day = dayOffset + 1;
        const date = new Date(year, month, day);
        const week = Math.ceil(i / 7);

        return {
          day,
          month: month + 1, // Months are 0-indexed, so add 1
          weekday:
            LONG_WEEKDAYS_MAP[date.toLocaleString(LOCALE, { weekday: "long" })],
          week,
          year,
          i,
        };
      });
    }).flat();
  }).flat();
}

function calculateEaster(year: number): Date {
  const a = year % 19;
  const b = Math.floor(year / 100);
  const c = year % 100;
  const d = Math.floor(b / 4);
  const e = b % 4;
  const f = Math.floor((b + 8) / 25);
  const g = Math.floor((b - f + 1) / 3);
  const h = (19 * a + b - d - g + 15) % 30;
  const i = Math.floor(c / 4);
  const k = c % 4;
  const l = (32 + 2 * e + 2 * i - h - k) % 7;
  const m = Math.floor((a + 11 * h + 22 * l) / 451);
  const month = Math.floor((h + l - 7 * m + 114) / 31);
  const day = ((h + l - 7 * m + 114) % 31) + 1;
  return new Date(Date.UTC(year, month - 1, day));
}

function getEasterSundayDay(): number {
  const easter = calculateEaster(CURRENT_YEAR);
  return easter.getUTCDate();
}

function getEasterMondayDay(): number {
  const easter = calculateEaster(CURRENT_YEAR);
  const easterMonday = new Date(easter);
  easterMonday.setUTCDate(easter.getUTCDate() + 1);
  return easterMonday.getUTCDate();
}

function getEasterSundayMonth(): number {
  const easter = calculateEaster(CURRENT_YEAR);
  return easter.getUTCMonth() + 1;
}

function getEasterMondayMonth(): number {
  const easter = calculateEaster(CURRENT_YEAR);
  const easterMonday = new Date(easter);
  easterMonday.setUTCDate(easter.getUTCDate() + 1);
  return easterMonday.getUTCMonth() + 1;
}

const PUBLIC_HOLIDAYS = [
  { month: 1, day: 1, label: "Naujieji metai" },
  { month: 2, day: 16, label: "Lietuvos valstybės atkūrimo diena" },
  { month: 3, day: 11, label: "Lietuvos nepriklausomybės atkūrimo diena" },
  {
    month: getEasterSundayMonth(),
    day: getEasterSundayDay(),
    label: "Velykos",
  },
  {
    month: getEasterMondayMonth(),
    day: getEasterMondayDay(),
    label: "Velykų antroji diena",
  },
  { month: 5, day: 1, label: "Tarptautinė darbo diena" },
  { month: 6, day: 24, label: "Joninės, Rasos" },
  { month: 7, day: 6, label: "Mindaugo karūnavimo diena" },
  { month: 8, day: 15, label: "Žolinė" },
  { month: 11, day: 1, label: "Visų šventųjų diena" },
  { month: 12, day: 24, label: "Šv. Kūčios" },
  { month: 12, day: 25, label: "Šv. Kalėdos" },
  { month: 12, day: 26, label: "Šv. Kalėdų antroji diena" },
];

// const nonWeekendHolidays = PUBLIC_HOLIDAYS.filter(
//   (holiday) => new Date(CURRENT_YEAR, holiday.month - 1, holiday.day).getUTCDay() !== 0
// );

type Holiday = (typeof PUBLIC_HOLIDAYS)[number];

function isHoliday(date: Date): boolean {
  const day = date.getUTCDate();
  const month = date.getUTCMonth() + 1;
  return PUBLIC_HOLIDAYS.some((holiday: Holiday) => {
    return month === holiday.month && day === holiday.day;
  });
}

function isWeekend(date: Date): boolean {
  const day = date.getUTCDay();
  return day === 0 || day === 6;
}

function isDayOff(date: Date): boolean {
  return isWeekend(date) || isHoliday(date);
}

function getAllDates(year: number) {
  const dates: DateInfo[] = [];
  let month = 1,
    week = 1,
    weekday,
    day = 1;
  const initialDay = new Date(year, month - 1, day);
  weekday = initialDay.getUTCDay() + 1;

  while (month <= 12) {
    while (day <= new Date(year, month, 0).getUTCDate()) {
      const date = new Date(year, month - 1, day);
      const isOff = !isWeekend(date) && isHoliday(date);
      dates.push({
        year,
        month,
        day,
        weekday,
        week,
        isOff,
      });
      day++;
      weekday = (weekday % 7) + 1;
      if (weekday === 1) week++;
    }
    day = 1;
    month++;
  }

  // always prepend first week filled (from previous year):
  ({ week, weekday } = dates[0]);

  if (weekday !== 1) {
    for (let i = weekday; i > 1; i--) {
      const prevDay = new Date(year - 1, 12, 0).getDate() - (weekday - i);
      const date = new Date(year, month - 1, day);
      const isOff = !isWeekend(date) && isHoliday(date);
      dates.unshift({
        year: year - 1,
        month: 12,
        day: prevDay,
        weekday: i,
        week: week,
        isOff,
      });
    }
  }

  // always append last week filled (from next year):
  ({ week, weekday } = dates.at(-1));
  if (weekday !== 7) {
    for (let i = weekday + 1; i <= 7; i++) {
      const date = new Date(year, month - 1, day);
      const isOff = !isWeekend(date) && isHoliday(date);
      dates.push({
        year: year,
        month: 1,
        day: i - weekday,
        weekday: i,
        week: week,
        isOff,
      });
    }
  }

  return dates;
}

const allDates = getAllDates(2023);

const parsedDates = allDates.map((date, i) => {
  if (i < 5) return date;
  const previousFiveDates = [];
  const nextFiveDates = [];

  for (let j = i; j > i - 5; j--) {
    previousFiveDates.unshift(allDates[j]);
  }

  // console.log(previousFiveDates);

  return {
    ...date,
  };
});

// console.log(parsedDates);

function getHolidayLabel(date: Date): string | null {
  const day = date.getUTCDate();
  const month = date.getUTCMonth() + 1;
  for (const holiday of PUBLIC_HOLIDAYS) {
    if (month === holiday.month && day === holiday.day) {
      return holiday.label;
    }
  }

  return null;
}

interface Day {
  number: number | null;
  isOff: boolean;
  isCurrent: boolean;
  holidayLabel: string | null;
}

function getCalendarData(year: number): Day[][][] {
  const calendar: Day[][][] = [];

  for (let month = 0; month < 12; month++) {
    let currentWeek: Day[] = [];
    const monthData: Day[][] = [];
    const firstDay = new Date(Date.UTC(year, month, 1));
    // Determine the start of the week
    let startOfWeek = new Date(firstDay);
    // console.log(startOfWeek.getUTCDay());
    while (startOfWeek.getUTCDay() > 1) {
      startOfWeek.setUTCDate(startOfWeek.getUTCDate() - 1);
    }

    // Fill in the days
    for (let i = 0; i < 6 * 7; i++) {
      const date = new Date(startOfWeek);
      date.setUTCDate(startOfWeek.getUTCDate() + i);

      const isCurrentMonth = date.getUTCMonth() === month;

      const day: Day = {
        number: isCurrentMonth ? date.getUTCDate() : null,
        isOff: isDayOff(date),
        isCurrent: true,
        holidayLabel: getHolidayLabel(date),
      };

      currentWeek.push(day);

      // console.log(currentWeek);

      if (currentWeek.length === 7) {
        monthData.push(currentWeek);
        currentWeek = [];
      }
    }

    calendar.push(monthData);
  }

  return calendar;
}

function getCellClass(day: Day): string {
  const baseClass = "p-2 text-center relative group";
  if (day.number == null) return `${baseClass} text-gray-300`;
  if (day.isOff) return `${baseClass} bg-red-100 font-bold`;
  return baseClass;
}

const weekdays: string[] = Array.from({ length: 7 }, (_, i) => {
  const date = new Date(Date.UTC(2023, 0, 2 + i)); // Start from Monday
  return new Intl.DateTimeFormat(LOCALE, { weekday: "short" }).format(date);
});

const calendarData = getCalendarData(CURRENT_YEAR);

const monthNames: string[] = Array.from({ length: 12 }, (_, i) => {
  const date = new Date(Date.UTC(CURRENT_YEAR, i, 1));
  return new Intl.DateTimeFormat(LOCALE, { month: "long" }).format(date);
});
---

<Layout title="Kalendorius">
  <h1 class="text-4xl font-bold mb-8">{CURRENT_YEAR} Kalendorius</h1>
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
    {
      calendarData.map((month, monthIndex) => (
        <div class="bg-white rounded shadow">
          <h2 class="text-xl font-semibold p-4 bg-gray-100">
            {monthNames[monthIndex]}
          </h2>
          <table class="w-full">
            <thead>
              <tr>
                {weekdays.map((day) => (
                  <th class="p-2 text-center">{day}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {month.map((week) => (
                <tr>
                  {week.map((day) => (
                    <td class={getCellClass(day)}>
                      {day.number}
                      {day.holidayLabel && (
                        <span class="invisible group-hover:visible absolute z-10 w-40 bg-gray-800 text-white text-center rounded-md py-2 px-3 -mt-1 ml-6 text-xs">
                          {day.holidayLabel}
                          <span class="absolute left-0 top-1/2 -ml-2 -mt-1 border-4 border-transparent border-r-gray-800" />
                        </span>
                      )}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ))
    }
  </div>
</Layout>
