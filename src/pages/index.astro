---
import { Icon } from "astro-icon/components";
import Layout from "../layouts/Layout.astro";

const CURRENT_YEAR: number = 2023;
const LOCALE: string = "lt-LT";
const weekFormatter = new Intl.DateTimeFormat(LOCALE, { weekday: "short" });

function calculateEaster(year: number): Date {
  const a = year % 19;
  const b = Math.floor(year / 100);
  const c = year % 100;
  const d = Math.floor(b / 4);
  const e = b % 4;
  const f = Math.floor((b + 8) / 25);
  const g = Math.floor((b - f + 1) / 3);
  const h = (19 * a + b - d - g + 15) % 30;
  const i = Math.floor(c / 4);
  const k = c % 4;
  const l = (32 + 2 * e + 2 * i - h - k) % 7;
  const m = Math.floor((a + 11 * h + 22 * l) / 451);
  const month = Math.floor((h + l - 7 * m + 114) / 31);
  const day = ((h + l - 7 * m + 114) % 31) + 1;
  return new Date(Date.UTC(year, month - 1, day));
}

function getEasterSundayDay(): number {
  const easter = calculateEaster(CURRENT_YEAR);
  return easter.getUTCDate();
}

function getEasterMondayDay(): number {
  const easter = calculateEaster(CURRENT_YEAR);
  const easterMonday = new Date(easter);
  easterMonday.setUTCDate(easter.getUTCDate() + 1);
  return easterMonday.getUTCDate();
}

function getEasterSundayMonth(): number {
  const easter = calculateEaster(CURRENT_YEAR);
  return easter.getUTCMonth() + 1;
}

function getEasterMondayMonth(): number {
  const easter = calculateEaster(CURRENT_YEAR);
  const easterMonday = new Date(easter);
  easterMonday.setUTCDate(easter.getUTCDate() + 1);
  return easterMonday.getUTCMonth() + 1;
}

const PUBLIC_HOLIDAYS = [
  { month: 1, day: 1, label: "Naujieji metai" },
  { month: 2, day: 16, label: "Lietuvos valstybės atkūrimo diena" },
  { month: 3, day: 11, label: "Lietuvos nepriklausomybės atkūrimo diena" },
  {
    month: getEasterSundayMonth(),
    day: getEasterSundayDay(),
    label: "Velykos",
  },
  {
    month: getEasterMondayMonth(),
    day: getEasterMondayDay(),
    label: "Velykų antroji diena",
  },
  { month: 5, day: 1, label: "Tarptautinė darbo diena" },
  { month: 6, day: 24, label: "Joninės, Rasos" },
  { month: 7, day: 6, label: "Mindaugo karūnavimo diena" },
  { month: 8, day: 15, label: "Žolinė" },
  { month: 11, day: 1, label: "Visų šventųjų diena" },
  { month: 12, day: 24, label: "Šv. Kūčios" },
  { month: 12, day: 25, label: "Šv. Kalėdos" },
  { month: 12, day: 26, label: "Šv. Kalėdų antroji diena" },
];

type Holiday = (typeof PUBLIC_HOLIDAYS)[number];

function isHoliday(date: Date): boolean {
  const day = date.getUTCDate();
  const month = date.getUTCMonth() + 1;
  return PUBLIC_HOLIDAYS.some((holiday: Holiday) => {
    return month === holiday.month && day === holiday.day;
  });
}

function isWeekend(date: Date): boolean {
  const day = date.getUTCDay();
  return day === 0 || day === 6;
}

function isDayOff(date: Date): boolean {
  return isWeekend(date) || isHoliday(date);
}

function getHolidayLabel(date: Date): string | null {
  const day = date.getUTCDate();
  const month = date.getUTCMonth() + 1;
  for (const holiday of PUBLIC_HOLIDAYS) {
    if (month === holiday.month && day === holiday.day) {
      return holiday.label;
    }
  }

  return null;
}

interface Day {
  number: number;
  isCurrent: boolean;
  holidayLabel?: string | null;
  isHoliday: boolean;
  isWeekend: boolean;
  isOpportunity: boolean;
}

function getCalendarData(year: number): Day[][][] {
  return Array.from({ length: 12 }, (_, month) => {
    const firstDay = new Date(Date.UTC(year, month, 1));
    let startOfWeek = new Date(firstDay);
    while (startOfWeek.getUTCDay() !== 1) {
      startOfWeek.setUTCDate(startOfWeek.getUTCDate() - 1);
    }

    return Array.from({ length: 6 * 7 }, (_, i) => {
      const date = new Date(startOfWeek);
      date.setUTCDate(startOfWeek.getUTCDate() + i);
      const isCurrentMonth = date.getUTCMonth() === month;

      const day: Day = {
        number: date.getUTCDate(),
        isHoliday: isHoliday(date),
        isWeekend: isWeekend(date),
        isOpportunity: false,
        isCurrent: isCurrentMonth,
        holidayLabel: getHolidayLabel(date),
      };

      if (isCurrentMonth && !isDayOff(date)) {
        const offHits = Array.from({ length: 5 }, (_, j) => {
          const offDate = new Date(date);
          offDate.setUTCDate(date.getUTCDate() + j - 2);
          return isDayOff(offDate);
        });
        if (offHits.filter(Boolean).length >= 3) {
          day.isOpportunity = true;
        }
      }

      return day;
    })
      .reduce((weeks, day, i) => {
        const weekIndex = Math.floor(i / 7);
        if (!weeks[weekIndex]) {
          weeks[weekIndex] = [];
        }
        weeks[weekIndex].push(day);
        return weeks;
      }, [] as Day[][])
      .map((week) => {
        return week.map((day, i) => {
          if (day.isOpportunity) {
            const prevDay = week[i - 1];
            const nextDay = week[i + 1];
            if (
              prevDay &&
              prevDay.isCurrent &&
              !isDayOff(new Date(Date.UTC(year, month, prevDay.number)))
            ) {
              prevDay.isOpportunity = true;
            }
            if (
              nextDay &&
              nextDay.isCurrent &&
              !isDayOff(new Date(Date.UTC(year, month, nextDay.number)))
            ) {
              nextDay.isOpportunity = true;
            }
          }
          return day;
        });
      });
  });
}

interface Opportunity {
  month: number;
  days: number[];
}

function getOpportunities(calendarData: Day[][][]): Opportunity[] {
  return calendarData.flatMap((monthData, monthIndex) =>
    monthData.flatMap((weekData) =>
      weekData.filter((day) => day.isOpportunity && day.isCurrent)
    ).length > 0
      ? [
          {
            month: monthIndex,
            days: monthData
              .flatMap((weekData) =>
                weekData.filter((day) => day.isOpportunity && day.isCurrent)
              )
              .map((day) => day.number),
          },
        ]
      : []
  );
}

function getCellClass(day: Day): string {
  const baseClass = "p-2 text-center relative group";
  if (!day.isCurrent) return `${baseClass} text-gray-300`;
  if (day.isOpportunity) return `${baseClass} bg-green-300 font-bold`;
  if (day.isHoliday) return `${baseClass} bg-red-200`;
  if (day.isWeekend) return `${baseClass} bg-gray-100`;
  return baseClass;
}

const weekdays: string[] = Array.from({ length: 7 }, (_, i) => {
  const date = new Date(Date.UTC(2023, 0, 2 + i)); // Start from Monday
  return weekFormatter.format(date);
});

const calendarData = getCalendarData(CURRENT_YEAR);
const opportunities = getOpportunities(calendarData);

const monthNames: string[] = Array.from({ length: 12 }, (_, i) => {
  const date = new Date(Date.UTC(CURRENT_YEAR, i, 1));
  return new Intl.DateTimeFormat(LOCALE, { month: "long" }).format(date);
});
---

<Layout title="Kalendorius">
  <div class="container mx-auto px-8 py-16">
    <div
      class="bg-gradient-to-r from-slate-800 to-slate-900 text-white py-20 px-12 rounded-lg shadow-xl mb-20"
    >
      <h1
        class="text-6xl font-extrabold mb-12 font-heading tracking-tight text-center"
      >
        {CURRENT_YEAR} Kalendorius
      </h1>
      <div class="bg-white bg-opacity-10 rounded-lg p-12">
        <h2
          class="text-3xl font-bold mb-8 flex items-center justify-center font-heading"
        >
          <Icon
            name="ic:round-event-available"
            class="w-10 h-10 mr-3 text-amber-400"
          />
          <span>Opportunity Summary</span>
        </h2>
        <ul class="list-none text-xl font-medium space-y-6">
          {
            opportunities.map(({ month, days }) => (
              <li>
                <span class="font-bold">{monthNames[month]}</span>:{" "}
                {days.join(", ")}
              </li>
            ))
          }
        </ul>
      </div>
    </div>
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-12">
      {
        calendarData.map((month, monthIndex) => (
          <div class="bg-white rounded-lg shadow-lg">
            <h2 class="text-2xl font-bold py-6 bg-gradient-to-r from-slate-700 to-slate-800 text-white font-heading tracking-tight text-center uppercase">
              {monthNames[monthIndex]}
            </h2>
            <table class="w-full">
              <thead>
                <tr class="bg-gray-50 text-gray-700 uppercase text-base font-bold">
                  {weekdays.map((day) => (
                    <th class="py-4 px-2 text-center">{day}</th>
                  ))}
                </tr>
              </thead>
              <tbody class="text-gray-700 font-medium">
                {month.map((week) => (
                  <tr class="border-b border-gray-200 hover:bg-gray-100">
                    {week.map((day) => (
                      <td class={getCellClass(day)}>
                        {day.number}
                        {day.holidayLabel && (
                          <span class="invisible group-hover:visible absolute z-10 w-48 bg-gray-800 text-white text-center rounded-md py-3 px-4 -mt-2 ml-8 text-sm">
                            {day.holidayLabel}
                            <span class="absolute left-0 top-1/2 -ml-2 -mt-2 border-4 border-transparent border-r-gray-800" />
                          </span>
                        )}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ))
      }
    </div>
  </div>
</Layout>
